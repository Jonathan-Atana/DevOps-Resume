name: Destroy Infrastructure

on:
  workflow_dispatch: # Manual trigger only for safety

env:
  AWS_REGION: us-east-1
  TF_VERSION: "1.12.1"
  WORKING_DIR: "./infrastructure"
  AWS_ROLE: ${{ secrets.AWS_ACTION_ROLE }}

jobs:
  destroy:
    runs-on: ubuntu-latest
    permissions:
      contents: read # To clone the repo
      id-token: write # Needed for AWS OIDC if using it

    steps:
      # Check-out the repository
      - name: Checkout code (Clone Repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # ‚Üê This gets full history instead of shallow clone

      # Terraform setup
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Configure AWS Credentials using OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE }} # OIDC Role ARN
          aws-region: ${{ env.AWS_REGION }}

      # Download plugins
      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_NAME }}"
        working-directory: ${{ env.WORKING_DIR }}

      # Download file from artifact
      - name: Download Terraform outputs artifact
        uses: actions/download-artifact@v4
        with:
          name: all-outputs
          path: terraform-outputs/
        continue-on-error: true # ‚Üê Don't fail if artifact doesn't exist

      # Read from artifact and store in output
      - name: Read from JSON artifact
        id: read-json-outputs
        run: |
          # Install jq
          sudo apt-get install -y jq

          if [ -f "terraform-outputs/all-outputs.json" ]; then
            echo "container_name=$(jq -r '.["container-name"].value' terraform-outputs/all-outputs.json)" >> $GITHUB_OUTPUT
            echo "image_uri=$(jq -r '.["container-image"].value' terraform-outputs/all-outputs.json)" >> $GITHUB_OUTPUT
          else
            echo "WARNING: all-outputs.json not found in artifacts"
            echo "container_name=" >> $GITHUB_OUTPUT
            echo "image_uri=" >> $GITHUB_OUTPUT
          fi

      # Empty the ECR repo before destroying architecture
      - name: Nuclear ECR image cleanup
        if: steps.read-json-outputs.outputs.container_name != ''
        run: |
          REPO_NAME="${{ steps.read-json-outputs.outputs.container_name }}"
          echo "üßπ Performing nuclear ECR cleanup for: $REPO_NAME"

          # Check if repository exists
          if ! aws ecr describe-repositories --repository-names $REPO_NAME >/dev/null 2>&1; then
            echo "‚ÑπÔ∏è Repository $REPO_NAME does not exist (already deleted?)"
            exit 0
          fi

          # Get image count for reporting
          IMAGE_COUNT=$(aws ecr list-images --repository-name $REPO_NAME --query 'length(imageIds)' --output text)

          if [ "$IMAGE_COUNT" -eq "0" ]; then
            echo "‚úÖ Repository $REPO_NAME is already empty"
            exit 0
          fi

          echo "‚ö†Ô∏è  Deleting $IMAGE_COUNT images from $REPO_NAME"

          # Efficient batch delete all images
          aws ecr batch-delete-image \
            --repository-name $REPO_NAME \
            --image-ids "$(aws ecr list-images \
              --repository-name $REPO_NAME \
              --query 'imageIds[].{imageTag:imageTag}' \
              --output json)" \
            --output text

          echo "‚úÖ Successfully deleted $IMAGE_COUNT images from $REPO_NAME"

      # Destroy infrastructure
      - name: Terraform Destroy
        timeout-minutes: 15 # ‚Üê Prevent hanging
        env:
          TF_VAR_container_image: ${{ steps.read-json-outputs.outputs.image_uri }}
          TF_VAR_container_name: ${{ steps.read-json-outputs.outputs.container_name }}
        run: terraform destroy -auto-approve
        working-directory: ${{ env.WORKING_DIR }}

      # Confirm destruction
      - name: Confirm destruction
        run: |
          echo "‚úÖ Infrastructure destroyed successfully"
          echo "üóëÔ∏è ECS cluster and all associated resources have been removed"

      # Cleanup downloaded artifacts
      - name: Cleanup downloaded artifacts
        if: always()
        run: rm -rf terraform-outputs/ image_uri.txt
